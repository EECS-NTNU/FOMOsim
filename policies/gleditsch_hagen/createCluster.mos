

! This file is the mathematical model of the sub-problem the bicycle reposisioning problem
! Created by Marte Dybendal Gleditsch and Kristine Hagen
! December 2017
! ------------------------------------------------------------------------------

model subproblem

options explterm
!options noimplicit

uses "mmxprs";
uses "mmsystem";




!-----------DATA FILES-------------
parameters
	DataFile 				= 'clusterInput.txt';
end-parameters



!----------SETS-------------

declarations
	Stations:		set of integer;
	Vehicles:		set of integer;
end-declarations

initializations from DataFile
	Stations;
	Vehicles;
end-initializations

finalize(Stations);
finalize(Vehicles);




!--------INPUT PARAMETERS----------

declarations
	demand:										array(Stations) 			of real;
	clusterNr:									array(Stations) 			of integer;
	drivingTime:								array(Stations, Stations)	of real;
	instance:																integer;
	vehicleNr:																integer;
	initialStation:								array(Vehicles)				of integer;
	weightNetDemand:														real;
	weightDrivingTime:														real;
	weightEqualSize:														real;
end-declarations

initializations from DataFile
	demand;
	clusterNr;
	drivingTime;
	instance;
	vehicleNr;
	initialStation;
	weightNetDemand;
	weightDrivingTime;
	weightEqualSize;
end-initializations




!-------VARIABLES------------

declarations
	cluster:						dynamic array(Stations, Vehicles)				of mpvar;
	totalDrivingTimeInCluster:		dynamic array(Stations, Vehicles)				of mpvar;
	totalNetDemandInCluster:		dynamic array(Vehicles) 						of mpvar;
	minSize: 																		mpvar;
	maxSize: 																		mpvar;
end-declarations

forall (ii in Stations, vv in Vehicles) do
	create(cluster(ii,vv));
	cluster(ii,vv) is_binary;
end-do	

forall (ii in Stations, vv in Vehicles) do
	create(totalNetDemandInCluster(vv));
end-do

forall (ii in Stations, vv in Vehicles) do
	create(totalDrivingTimeInCluster(ii,vv));
end-do




!------------CONSTRAINTS-------------

declarations
	clusterBelonging:					dynamic array(Stations)					of linctr;	
	maxSizeCon:							dynamic array(Vehicles)					of linctr;		
	minSizeCon:							dynamic array(Vehicles)					of linctr;	
end-declarations


!Hver stasjon må være tilknyttet clusterNr biler
forall (ii in Stations) do
	clusterBelonging(ii) := 
		sum(vv in Vehicles) cluster(ii,vv) = clusterNr(ii);
end-do

!Max størrelse på cluster
forall(vv in Vehicles) do
	maxSizeCon(vv) :=
		maxSize >= sum(ii in Stations) cluster(ii,vv);
end-do

!Min størrelse på cluster
forall(vv in Vehicles) do
	minSizeCon(vv) :=
		minSize <= sum(ii in Stations) cluster(ii,vv);
end-do




!------------------------ OBJECTIVES--------------------------------

declarations
	totalNetDemandInCluster1: 		dynamic array(Vehicles)							of linctr;
	totalNetDemandInCluster2: 		dynamic array(Vehicles)							of linctr;
	totalDrivingTimeInCluster1:		dynamic array(Stations, Vehicles)				of linctr;
	totalDrivingTimeInCluster2:		dynamic array(Stations, Vehicles)				of linctr;
	objective:																		linctr;	
	sizeDiff:																		linctr;
	initialStationCon:				dynamic array(Stations)							of linctr;
end-declarations

! absolute value of total net demand in cluster
forall(vv in Vehicles) do
	totalNetDemandInCluster1(vv) := 
		totalNetDemandInCluster(vv) >= -sum(ii in Stations) demand(ii)*cluster(ii,vv);
	totalNetDemandInCluster2(vv) := 
		totalNetDemandInCluster(vv) >= sum(ii in Stations) demand(ii)*cluster(ii,vv);	
end-do

forall(vv in Vehicles) do
	cluster(initialStation(vv), vv) = 1;
end-do

!Driving time in cluster
M := 100;
forall(ii in Stations, vv in Vehicles | ii <> initialStation(vv)) do
	totalDrivingTimeInCluster1(ii,vv) := 
		totalDrivingTimeInCluster(ii, vv) >= drivingTime(initialStation(vv),ii) - M*(1-cluster(ii,vv));
	totalDrivingTimeInCluster2(ii, vv) := 
		totalDrivingTimeInCluster(ii, vv) <= drivingTime(initialStation(vv),ii) + M*(1-cluster(ii,vv));
end-do


!Diff size
	sizeDiff := maxSize - minSize;




!Objective
Objective := 
	weightNetDemand*sum(vv in Vehicles) totalNetDemandInCluster(vv) + weightDrivingTime*sum(ii in Stations, vv in Vehicles) totalDrivingTimeInCluster(ii,vv) + weightEqualSize*sizeDiff;
	
minimize(Objective);






!PRINT TO FILE IKKE ENDRE!!!!!!
fopen("clusterOutput-Instance"+instance+"-V"+vehicleNr+".txt",F_OUTPUT);
	
	forall (vv in Vehicles) do 
		forall(ii in Stations | getsol(cluster(ii,vv))>0) do
			writeln("" + vv + " " + ii + "");
		end-do
end-do

fclose(F_OUTPUT);
	
end-model

!-----PRINT------

writeln("Objective: " + getsol(Objective));
forall (vv in Vehicles) do 
	writeln("In cluster " + vv + " station:");
	forall(ii in Stations | getsol(cluster(ii,vv))>0) do
		writeln(ii);
	end-do
	writeln("Total driving time: " + sum(ii in Stations)getsol(totalDrivingTimeInCluster(ii,vv)));
	writeln("Total net demand in cluster: " + getsol(totalNetDemandInCluster(vv)));
end-do
writeln("Total net demand in system: " + sum(vv in Vehicles)getsol(totalNetDemandInCluster(vv)));



